[{"title":"CentOS 7 下搭建爬虫环境","url":"/2019/08/11/CentOS 7-下搭建爬虫环境/","content":"\n### 在 CentOS 7 下搭建爬虫开发环境\n\n# 项目部署运行说明\n\n## 基础环境\n本项目依赖的基础环境：\n* Python3.5以上。\n* Redis\n* MongoDB\n* supervisor\n* virtualenv\n* chrome 浏览器\n* 其他Python第三方依赖库。\n\n---\n\n## 安装说明\n\n### Python3.5及以上版本安装\n\n截止至2018年8月，由于`Python3.7`尚未完全稳定，因此，推荐使用`Python3.6`版本。\n\n`Python3.6`安装方法如下所示：\n```shell\n\n# 下载Python源码\nwget https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz\n\n# 安装相关依赖\nyum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel -y\n\ncd Python-3.6.8\n\n# 编译 安装\n# --prefix 指定安装目录  --enable-optimizations为优化选项\n./configure --prefix=/usr/local/python3.6 --enable-optimizations\nmake\nmake install\n```\n\n---\n\n### Redis安装\n\nRedis安装教程如下所示：\n```shell\n# 安装Remi's RPM repository\nyum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\n\n# 安装redis\nyum --enablerepo=remi install redis\n\n# 开启redis服务\nservice redis start\n\n# 打开redis客户端，成功进入客户端则安装成功\nredis-cl\n\n# 如果远程连接不上则检查一下防火墙6379端口是否开启\n```\n\n---\n\n### MongoDB\n\nMongoDB安装教程如下所示：\n```shell\n# 配置mongodb安装源\n# 创建/etc/yum.repos.d/mongodb-org-3.6.repo文件（配置mongodb的源信息）\ntouch /etc/yum.repos.d/mongodb-org-3.6.repo\n\n# 将以下信息复制粘贴到创建的文件当中\n[mongodb-org-3.6]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc\n\n# 安装mongodb\nyum install -y mongodb-org\n\n# 开启mongodb服务\n(service mongodb start)(用下面这个)\nmongod --config /etc/mongod.conf --wiredTigerCacheSizeGB 2\n\n# 进入mongodb客户端，成功则安装成功\nmongo\n```\n\n---\n\n### supervisor\n\nsupervisor是linux下用于管理进程的工具，在本项目中用于管理爬虫及各个系统组件。\n\nsupervisor安装方法如下所示：\n\n```shell\n\nyum install python-setuptools\neasy_install supervisor\n# 生成supervisor配置\necho_supervisord_conf > /etc/supervisord.conf\n# 启动supervisord进程\nsupervisord -c /etc/supervisord.conf\n```\n\n---\n\n### virtualenv\n\nvirtualenv是用于Python项目环境隔离的工具，针对不同的项目，应该为其配置不同的虚拟环境。\n\nvirtualenv安装方法如下所示：\n\n```shell\n\n# 安装virtualenv\nyum install python-virtualenv -y\n\n```\n\n---\n\n### 安装chrome无头浏览器\n```\n# 使用阿里云的yum repo，避免网络问题安装依赖失败\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 安装google-chrome\ncurl https://intoli.com/install-google-chrome.sh | bash\n\n# 安装其他依赖\nyum install ipa-gothic-fonts xorg-x11-fonts-100dpi xorg-x11-fonts-75dpi xorg-x11-utils xorg-x11-fonts-cyrillic xorg-x11-fonts-Type1 xorg-x11-fonts-misc -y\n\n# 测试截屏功能，若当前文件夹下出现截屏文件(screenshot.png)，则安装成功\n\ngoogle-chrome-stable --no-sandbox --headless --disable-gpu --screenshot https://www.suning.com/\n\n```\n\n### 参考：\n> https://intoli.com/blog/installing-google-chrome-on-centos/\n\n","tags":["Linux / 爬虫环境搭建"]},{"title":"hexo 常用命令","url":"/2019/08/11/hexo-常用命令/","content":"### 1.新建一个网站\n```\nhexo init [folder]\n```\n### 2.创建文章\n```\nhexo new [layout] \"article title\"  使用默认方式创建 则: hexo new \"article title\"\n```\n### 3.生成静态文件\n```\nhexo generate 简写： hexo g\n```\n### 4.清除缓存文件 (db.json) 和已生成的静态文件 (public)\n```\nhexo clean 简写： hexo c\n```\n### 5. 启动服务器\n```\nhexo server 简写： hexo s\n```\n### 6.部署网站(部署之前需要生成静态文件)\n```\nhexo deploy 简写： hexo d\n```\n\n参考：https://hexo.io/zh-cn/docs/commands","tags":["hexo"]},{"title":"搭建 mongo 集群","url":"/2019/07/07/搭建-mongo-集群/","content":"## 说明\n\n### 角色说明\n\n**mongos**，数据库集群请求的入口，所有的请求都通过mongos进行协调，不需要在应用程序添加一个路由选择器，mongos自己就是一个请求分发中心，它负责把对应的数据请求请求转发到对应的shard服务器上。在生产环境通常有多mongos作为请求的入口，防止其中一个挂掉所有的mongodb请求都没有办法操作。\n\n**config server**，顾名思义为配置服务器，存储所有数据库元信息（路由、分片）的配置。mongos本身没有物理存储分片服务器和数据路由信息，只是缓存在内存里，配置服务器则实际存储这些数据。mongos第一次启动或者关掉重启就会从 config server 加载配置信息，以后如果配置服务器信息变化会通知到所有的 mongos 更新自己的状态，这样 mongos 就能继续准确路由。在生产环境通常有多个 config server 配置服务器，因为它存储了分片路由的元数据，防止数据丢失！\n\n**shard**，分片（sharding）是指将数据库拆分，将其分散在不同的机器上的过程。将数据分散到不同的机器上，不需要功能强大的服务器就可以存储更多的数据和处理更大的负载。基本思想就是将集合切成小块，这些块分散到若干片里，每个片只负责总数据的一部分，最后通过一个均衡器来对各个分片进行均衡（数据迁移）。\n\n**replica set**，副本集，其实就是shard的备份，防止shard挂掉之后数据丢失。复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。\n\n**仲裁者（Arbiter）**，是复制集中的一个MongoDB实例，它并不保存数据。仲裁节点使用最小的资源并且不要求硬件设备，不能将Arbiter部署在同一个数据集节点中，可以部署在其他应用服务器或者监视服务器中，也可部署在单独的虚拟机中。为了确保复制集中有奇数的投票成员（包括primary），需要添加仲裁节点做为投票，否则primary不能运行时不会自动切换primary。\n\n### 当前配置方式说明\n\n- 配置文件采用yaml方式来配置\n- 生产中取消了仲裁者的角色，因为仲裁者也不会存储数据，只是起到选举的作用，线上为了保证数据安全，每份数据都会配置两个副本集，也就是每份数据存储了三份。\n- 优化配置，采用五台集群\n\n#### 服务器规划\n\n|106 | 101 | 125 | 118| 119|\n|:-----:|:-----:|:-----:|:-----:|:-----:|\n|1|2|3|4|5|\n|192.168.1.106|192.168.1.101|192.168.1.125|192.168.1.118|192.168.1.119|\n|mongos|config server|config server|mongos|config server|\n|shard1|shard2|shard2|shard1|shard1|\n|shard4|shard4|shard3|shard2|shard3|\n|shard5|shard5|shard4|shard3|shard5|\n####     \n|职能名|机器1|机器2|机器3|\n|:-----:|:-----:|:-----:|:-----:|\n|mongos|106 **(1)**|118 **(4)**|\n|config server|101 **(3)**|125 **(2)**|119 **(5)**|\n|shard1|118 **(4)**|119 **(5)**|106 **(1)**|\n|shard2|125 **(2)**|101 **(3)**|118 **(4)**|\n|shard3|101 **(3)**|118 **(4)**|119 **(5)**|\n|shard4|106 **(1)**|125 **(2)**|101 **(3)**|\n|shard5|119 **(5)**|106 **(1)**|125 **(2)**|\n\n#### 端口分配：\n```\nmongos：27017\nconfig：21000\nshard1：27001\nshard2：27002\nshard3：27003\nshard4：27004\nshard5：27005\n```\n\n### 部署\n#### 创建相关目录\n根据服务器的规范，分别在对应的服务器上建立conf、mongos、config、shard1、shard2、shard3、shard4、shard5等目录，因为mongos不存储数据，只需要建立日志文件目录即可。\n```\nmkdir -p /usr/local/mongodb/conf\nmkdir -p /home/data/mongos/log\nmkdir -p /home/data/config/data\nmkdir -p /home/data/config/log\nmkdir -p /home/data/shard1/data\nmkdir -p /home/data/shard1/log\nmkdir -p /home/data/shard2/data\nmkdir -p /home/data/shard2/log\nmkdir -p /home/data/shard3/data\nmkdir -p /home/data/shard3/log\nmkdir -p /home/data/shard4/data\nmkdir -p /home/data/shard4/log\nmkdir -p /home/data/shard5/data\nmkdir -p /home/data/shard5/log\n```\n#### 配置server config机器\n在服务器2、3、4上配置以下内容：\n#### 添加配置文件\n```\nvi /usr/local/mongodb/conf/config.conf\n```\n```\n## content\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /data/config/log/config.log\n \n# Where and how to store data.\nstorage:\n  dbPath: /home/data/config/data\n  journal:\n    enabled: true\n# how the process runs\nprocessManagement:\n  fork: true\n  pidFilePath: /home/data/config/log/configsrv.pid\n \n# network interfaces\nnet:\n  port: 21000\n  bindIp: 192.168.1.101\n \n#operationProfiling:\nreplication:\n    replSetName: config        \n\nsharding:\n    clusterRole: configsvr\n```\n#### 启动三台服务器的config server\n```\nmongod --config /usr/local/mongodb/conf/config.conf\n```\n#### 登录任意一台配置服务器，初始化配置副本集\n```\n    #连接\n    mongo 192.168.1.101:21000\n    #config变量\n    config = {\n    ...    _id : \"config\",\n    ...     members : [\n    ...         {_id : 0, host : \"192.168.1.101:21000\" },\n    ...         {_id : 1, host : \"192.168.1.125:21000\" },\n    ...         {_id : 2, host : \"192.168.1.119:21000\" }\n    ...     ]\n    ... }\n    \n    #初始化副本集\n    rs.initiate(config)\n    \n    #查看分区状态\n    rs.status();\n```\n 其中，”_id” : “configs”应与配置文件中配置的 replicaction.replSetName 一致，”members” 中的 “host” 为三个节点的ip和port\n#### 配置分片、副本集\n#### 配置第一个分片副本集\n在服务器1、4、5上面做以下配置\n配置文件\n```\n    vi /usr/local/mongodb/conf/shard1.conf\n```\n```\n#### 配置文件内容\n# where to write logging data.\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /home/data/shard1/log/shard1.log\n \n# Where and how to store data.\nstorage:\n  dbPath: /home/data/shard1/data\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n       cacheSizeGB: 20\n\n# how the process runs\nprocessManagement:\n  fork: true \n  pidFilePath: /home/data/shard1/log/shard1.pid\n \n# network interfaces\nnet:\n  port: 27001\n  bindIp: 192.168.1.106\n\n#operationProfiling:\nreplication:\n    replSetName: shard1\nsharding:\n    clusterRole: shardsvr\n```\n#### 启动三台服务器的shard1 server\n```\nmongod  --config  /usr/local/mongodb/conf/shard1.conf\n```\n#### 登陆任意一台服务器，初始化副本集\n```\n mongo 192.168.1.106:27001\n```\n#### 使用admin数据库\n```\n use admin\n```\n#### 定义副本集配置\n```\nconfig = {\n...    _id : \"shard1\",\n...     members : [\n...         {_id : 1, host : \"192.168.1.106:27001\" },,\n...         {_id : 1, host : \"192.168.1.118:27001\" },\n...         {_id : 2, host : \"192.168.1.119:27001\" }\n...     ]\n... }\n```\n\n#### 初始化副本集配置\n\n```\nrs.initiate(config);\n```\n\n#### 查看分区状态\n\n```\nrs.status();\n```\n\n* 其他四个分片参照分片1配置好\n\n#### 配置路由服务器 mongos\n#### 以下配置在服务器1、4上执行\n\n* 注意：先启动配置服务器和分片服务器,后启动路由实例\n\n```\nvi /usr/local/mongodb/conf/mongos.conf\n```\n\n#### 配置内容\n\n```\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /home/data/mongos/log/mongos.log\nprocessManagement:\n  fork: true\n#pidFilePath: /usr/local/mongodb/mongos.pid\n \n#network interfaces\nnet:\n  port: 20000\n  bindIp: 192.168.1.106\n#监听的配置服务器,只能有1个或者3个 configs为配置服务器的副本集名字\nsharding:\n   configDB: config/192.168.1.101:21000,192.168.1.125:21000,192.168.1.119:21000\n```\n\n#### 启动二台服务器的mongos server\n\n```\nmongos  --config  /usr/local/mongodb/conf/mongos.conf\n```\n\n#### 启用分片\n\n目前搭建了mongodb配置服务器、路由服务器，各个分片服务器，不过应用程序连接到mongos路由服务器并不能使用分片机制，还需要在程序里设置分片配置，让分片生效。\n\n登陆任意一台mongos\n```\nmongo 192.168.0.31:20000\n```\n#### 使用admin数据库\nuse  admin\n#### 串联路由服务器与分配副本集\n```\nsh.addShard(\"shard1/192.168.1.106:27001,192.168.1.118:27001,192.168.1.119:27001\")\nsh.addShard(\"shard2/192.168.1.125:27002,192.168.1.101:27002,192.168.1.118:27002\")\nsh.addShard(\"shard3/192.168.1.101:27003,192.168.1.118:27003,192.168.1.119:27003\")\nsh.addShard(\"shard4/192.168.1.106:27004,192.168.1.125:27004,192.168.1.101:27004\")\nsh.addShard(\"shard5/192.168.1.106:27005,192.168.1.119:27005,192.168.1.125:27005\")\n```\n#### 查看集群状态\n```\nsh.status()\n```\n#### 到这里就算配置完了\n\n### 集群启动脚本：\n把下面启动命令分别复制到相应的机器上运行\n> 按顺序，先启动配置服务器，在启动分片，最后才到路由服务器\n\n```\n119:\nmongod --config /usr/local/mongodb/conf/config.conf\nmongod  --config  /usr/local/mongodb/conf/shard1.conf\nmongod  --config  /usr/local/mongodb/conf/shard3.conf\nmongod  --config  /usr/local/mongodb/conf/shard5.conf\n\n101:\nmongod --config /usr/local/mongodb/conf/config.conf\nmongod  --config  /usr/local/mongodb/conf/shard2.conf\nmongod  --config  /usr/local/mongodb/conf/shard3.conf\nmongod  --config  /usr/local/mongodb/conf/shard4.conf\n\n125:\nmongod --config /usr/local/mongodb/conf/config.conf\nmongod  --config  /usr/local/mongodb/conf/shard2.conf\nmongod  --config  /usr/local/mongodb/conf/shard4.conf\nmongod  --config  /usr/local/mongodb/conf/shard5.conf\n\n106:\nmongod  --config  /usr/local/mongodb/conf/shard1.conf\nmongod  --config  /usr/local/mongodb/conf/shard4.conf\nmongod  --config  /usr/local/mongodb/conf/shard5.conf\nmongos  --config  /usr/local/mongodb/conf/mongos.conf\n\n\n118:\nmongod  --config  /usr/local/mongodb/conf/shard1.conf\nmongod  --config  /usr/local/mongodb/conf/shard2.conf\nmongod  --config  /usr/local/mongodb/conf/shard3.conf\nmongos  --config  /usr/local/mongodb/conf/mongos.conf\n```\n### 关闭\n```\nkillall mongod\nkillall mongos\n先通过shell连上服务器：\nmongo\nuse admin\ndb.shutdownServer()\n或者直接kill -15 <pid>,注意kill -9 可能会导致数据文件损坏\n```\n\n### 连接mongo\n```\nmongo 192.168.1.106:27017  或  mongo 192.168.1.118:27017  \n```\n\n参考：\n```\nhttp://www.ityouknow.com/mongodb/2017/08/05/mongodb-cluster-setup.html\nhttp://www.ityouknow.com/mongodb/2017/08/16/install-mongodb-cluster.html\n```\n","tags":["mongo / mongo集群"]},{"title":"redis 基本操作（python 版）","url":"/2019/03/04/redis基本操作（python版）/","content":"这里记录一下 python 对 redis 的基本操作\n\n## 数组\n\n### 添加到数组","tags":["redis"]},{"title":"Hello World","url":"/2019/03/03/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]